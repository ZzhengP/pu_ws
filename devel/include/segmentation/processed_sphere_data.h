// Generated by gencpp from file segmentation/processed_sphere_data.msg
// DO NOT EDIT!


#ifndef SEGMENTATION_MESSAGE_PROCESSED_SPHERE_DATA_H
#define SEGMENTATION_MESSAGE_PROCESSED_SPHERE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace segmentation
{
template <class ContainerAllocator>
struct processed_sphere_data_
{
  typedef processed_sphere_data_<ContainerAllocator> Type;

  processed_sphere_data_()
    : center()
    , radius(0.0)  {
    }
  processed_sphere_data_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _center_type;
  _center_type center;

   typedef double _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::segmentation::processed_sphere_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segmentation::processed_sphere_data_<ContainerAllocator> const> ConstPtr;

}; // struct processed_sphere_data_

typedef ::segmentation::processed_sphere_data_<std::allocator<void> > processed_sphere_data;

typedef boost::shared_ptr< ::segmentation::processed_sphere_data > processed_sphere_dataPtr;
typedef boost::shared_ptr< ::segmentation::processed_sphere_data const> processed_sphere_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segmentation::processed_sphere_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segmentation::processed_sphere_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace segmentation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'segmentation': ['/home/zheng/pu_ws/src/segmentation/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::segmentation::processed_sphere_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segmentation::processed_sphere_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segmentation::processed_sphere_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segmentation::processed_sphere_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segmentation::processed_sphere_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segmentation::processed_sphere_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segmentation::processed_sphere_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2cb214aacb9b0a8737c65ce951a95d8";
  }

  static const char* value(const ::segmentation::processed_sphere_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2cb214aacb9b0a8ULL;
  static const uint64_t static_value2 = 0x737c65ce951a95d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::segmentation::processed_sphere_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segmentation/processed_sphere_data";
  }

  static const char* value(const ::segmentation::processed_sphere_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segmentation::processed_sphere_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] center\n\
float64 radius\n\
";
  }

  static const char* value(const ::segmentation::processed_sphere_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segmentation::processed_sphere_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct processed_sphere_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segmentation::processed_sphere_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segmentation::processed_sphere_data_<ContainerAllocator>& v)
  {
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.center[i]);
    }
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGMENTATION_MESSAGE_PROCESSED_SPHERE_DATA_H
