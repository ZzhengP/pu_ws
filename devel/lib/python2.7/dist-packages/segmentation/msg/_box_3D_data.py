# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from segmentation/box_3D_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class box_3D_data(genpy.Message):
  _md5sum = "4ef979cbe8c870ca365c89208698d6f7"
  _type = "segmentation/box_3D_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[] center
float64 longestEdgeLen
float64 medianEdgeLen
float64 shortestEdgeLen
float64[] longestEdgeDir
float64[] medianEdgeDir
float64[] shortestEdgeDir
"""
  __slots__ = ['center','longestEdgeLen','medianEdgeLen','shortestEdgeLen','longestEdgeDir','medianEdgeDir','shortestEdgeDir']
  _slot_types = ['float64[]','float64','float64','float64','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center,longestEdgeLen,medianEdgeLen,shortestEdgeLen,longestEdgeDir,medianEdgeDir,shortestEdgeDir

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(box_3D_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = []
      if self.longestEdgeLen is None:
        self.longestEdgeLen = 0.
      if self.medianEdgeLen is None:
        self.medianEdgeLen = 0.
      if self.shortestEdgeLen is None:
        self.shortestEdgeLen = 0.
      if self.longestEdgeDir is None:
        self.longestEdgeDir = []
      if self.medianEdgeDir is None:
        self.medianEdgeDir = []
      if self.shortestEdgeDir is None:
        self.shortestEdgeDir = []
    else:
      self.center = []
      self.longestEdgeLen = 0.
      self.medianEdgeLen = 0.
      self.shortestEdgeLen = 0.
      self.longestEdgeDir = []
      self.medianEdgeDir = []
      self.shortestEdgeDir = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.center))
      _x = self
      buff.write(_get_struct_3d().pack(_x.longestEdgeLen, _x.medianEdgeLen, _x.shortestEdgeLen))
      length = len(self.longestEdgeDir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.longestEdgeDir))
      length = len(self.medianEdgeDir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.medianEdgeDir))
      length = len(self.shortestEdgeDir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.shortestEdgeDir))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.center = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 24
      (_x.longestEdgeLen, _x.medianEdgeLen, _x.shortestEdgeLen,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.longestEdgeDir = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.medianEdgeDir = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.shortestEdgeDir = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.center.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.longestEdgeLen, _x.medianEdgeLen, _x.shortestEdgeLen))
      length = len(self.longestEdgeDir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.longestEdgeDir.tostring())
      length = len(self.medianEdgeDir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.medianEdgeDir.tostring())
      length = len(self.shortestEdgeDir)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.shortestEdgeDir.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.center = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.longestEdgeLen, _x.medianEdgeLen, _x.shortestEdgeLen,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.longestEdgeDir = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.medianEdgeDir = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.shortestEdgeDir = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
